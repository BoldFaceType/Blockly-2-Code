
import { BlockDefinition, BlockCategory } from './types';

export const THEMES = ['light', 'vscode-dark', 'monokai', 'dracula'];

export const BLOCKS: { [key: string]: BlockDefinition } = {
  print: {
    text: 'print',
    category: BlockCategory.IO,
    syntax: 'print',
    inputs: [{ name: 'value', type: 'text', placeholder: '"Hello, World!"' }],
    template: 'print({value})',
    color: 'bg-sky-500',
    accent: 'border-l-sky-300',
    flow: true,
    isExpression: false,
  },
  variable: {
    text: 'variable',
    category: BlockCategory.VARIABLES,
    syntax: 'variable',
    inputs: [
      { name: 'name', type: 'text', placeholder: 'my_var', validation: { pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', message: 'Invalid name' } },
      { name: 'value', type: 'text', placeholder: '42' },
    ],
    template: '{name} = {value}',
    color: 'bg-purple-500',
    accent: 'border-l-purple-300',
    flow: true,
    isExpression: false,
  },
  string: {
    text: 'string',
    category: BlockCategory.VARIABLES,
    syntax: 'string',
    inputs: [{ name: 'value', type: 'text', placeholder: 'Hello' }],
    template: '"{value}"',
    color: 'bg-green-500',
    accent: 'border-l-green-300',
    flow: false,
    isExpression: true,
  },
  number: {
    text: 'number',
    category: BlockCategory.VARIABLES,
    syntax: 'number',
    inputs: [{ name: 'value', type: 'number', placeholder: '42' }],
    template: '{value}',
    color: 'bg-amber-500',
    accent: 'border-l-amber-300',
    flow: false,
    isExpression: true,
  },
  boolean: {
    text: 'boolean',
    category: BlockCategory.VARIABLES,
    syntax: 'boolean',
    inputs: [{ name: 'value', type: 'select', options: ['True', 'False'], defaultValue: 'True' }],
    template: '{value}',
    color: 'bg-teal-500',
    accent: 'border-l-teal-300',
    flow: false,
    isExpression: true,
  },
  list: {
    text: 'list',
    category: BlockCategory.VARIABLES,
    syntax: 'list',
    inputs: [{ name: 'items', type: 'text', placeholder: '"apple", "banana", 1' }],
    template: '[{items}]',
    color: 'bg-lime-600',
    accent: 'border-l-lime-400',
    flow: false,
    isExpression: true,
  },
  dictionary: {
    text: 'dictionary',
    category: BlockCategory.VARIABLES,
    syntax: 'dictionary',
    inputs: [{ name: 'pairs', type: 'text', placeholder: '"key1": "value1", "key2": 2' }],
    template: '{{ {pairs} }}',
    color: 'bg-lime-600',
    accent: 'border-l-lime-400',
    flow: false,
    isExpression: true,
  },
  if_else_stmt: {
    text: 'if / else',
    category: BlockCategory.CONTROL,
    syntax: 'if_else_stmt',
    inputs: [{ name: 'condition', type: 'text', placeholder: 'x > 5' }],
    nestableAreas: [
      { name: 'body', label: 'do' },
      { name: 'else_body', label: 'else' },
    ],
    template: 'if {condition}:\n{body}\nelse:\n{else_body}',
    color: 'bg-pink-500',
    accent: 'border-l-pink-300',
    flow: true,
    isExpression: false,
  },
  for_loop: {
    text: 'for loop',
    category: BlockCategory.CONTROL,
    syntax: 'for_loop',
    inputs: [
      { name: 'var', type: 'text', placeholder: 'i', validation: { pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', message: 'Invalid name' }},
      { name: 'iterable', type: 'text', placeholder: 'range(5)' },
    ],
    nestableAreas: [{ name: 'body', label: 'do' }],
    template: 'for {var} in {iterable}:\n{body}',
    color: 'bg-pink-500',
    accent: 'border-l-pink-300',
    flow: true,
    isExpression: false,
  },
  while_loop: {
    text: 'while loop',
    category: BlockCategory.CONTROL,
    syntax: 'while_loop',
    inputs: [{ name: 'condition', type: 'text', placeholder: 'i < 5' }],
    nestableAreas: [{ name: 'body', label: 'do' }],
    template: 'while {condition}:\n{body}',
    color: 'bg-pink-500',
    accent: 'border-l-pink-300',
    flow: true,
    isExpression: false,
  },
  break: {
    text: 'break',
    category: BlockCategory.CONTROL,
    syntax: 'break',
    inputs: [],
    template: 'break',
    color: 'bg-pink-500',
    accent: 'border-l-pink-300',
    flow: true,
    isExpression: false,
  },
  continue: {
    text: 'continue',
    category: BlockCategory.CONTROL,
    syntax: 'continue',
    inputs: [],
    template: 'continue',
    color: 'bg-pink-500',
    accent: 'border-l-pink-300',
    flow: true,
    isExpression: false,
  },
  math_op: {
    text: 'math op',
    category: BlockCategory.OPERATIONS,
    syntax: 'math_op',
    inputs: [
      { name: 'left', type: 'number', placeholder: '5' },
      { name: 'operator', type: 'select', options: ['+', '-', '*', '/'], defaultValue: '+' },
      { name: 'right', type: 'number', placeholder: '3' },
    ],
    template: '({left} {operator} {right})',
    color: 'bg-amber-500',
    accent: 'border-l-amber-300',
    flow: false,
    isExpression: true,
  },
  logical_op: {
    text: 'logical op',
    category: BlockCategory.OPERATIONS,
    syntax: 'logical_op',
    inputs: [
      { name: 'left', type: 'text', placeholder: 'x > 5' },
      { name: 'operator', type: 'select', options: ['and', 'or'], defaultValue: 'and' },
      { name: 'right', type: 'text', placeholder: 'y < 10' },
    ],
    template: '({left} {operator} {right})',
    color: 'bg-amber-500',
    accent: 'border-l-amber-300',
    flow: false,
    isExpression: true,
  },
  not_op: {
    text: 'not',
    category: BlockCategory.OPERATIONS,
    syntax: 'not_op',
    inputs: [{ name: 'expression', type: 'text', placeholder: 'is_active' }],
    template: 'not ({expression})',
    color: 'bg-amber-500',
    accent: 'border-l-amber-300',
    flow: false,
    isExpression: true,
  },
  comparison_op: {
    text: 'comparison',
    category: BlockCategory.OPERATIONS,
    syntax: 'comparison',
    inputs: [
      { name: 'left', type: 'text', placeholder: 'x' },
      { name: 'operator', type: 'select', options: ['==', '!=', '<', '<=', '>', '>='], defaultValue: '==' },
      { name: 'right', type: 'text', placeholder: '5' },
    ],
    template: '{left} {operator} {right}',
    color: 'bg-amber-500',
    accent: 'border-l-amber-300',
    flow: false,
    isExpression: true,
  },
  function_def: {
    text: 'def function',
    category: BlockCategory.FUNCTIONS,
    syntax: 'function_def',
    inputs: [
        { name: 'name', type: 'text', placeholder: 'my_function', validation: { pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', message: 'Invalid name' } },
        { name: 'params', type: 'text', placeholder: 'arg1, arg2' },
    ],
    nestableAreas: [{ name: 'body', label: 'do' }],
    template: 'def {name}({params}):\n{body}',
    color: 'bg-cyan-500',
    accent: 'border-l-cyan-300',
    flow: true,
    isExpression: false,
  },
  return_stmt: {
    text: 'return',
    category: BlockCategory.FUNCTIONS,
    syntax: 'return_stmt',
    inputs: [{ name: 'value', type: 'text', placeholder: 'result' }],
    template: 'return {value}',
    color: 'bg-cyan-500',
    accent: 'border-l-cyan-300',
    flow: true,
    isExpression: false,
  },
  f_string: {
    text: 'f-string',
    category: BlockCategory.STRING_OPS,
    syntax: 'f-string',
    inputs: [{ name: 'content', type: 'text', placeholder: 'Hello, {name}' }],
    template: 'f"{content}"',
    color: 'bg-emerald-500',
    accent: 'border-l-emerald-300',
    flow: false,
    isExpression: true,
  },
  string_split: {
    text: 'string split',
    category: BlockCategory.STRING_OPS,
    syntax: 'string_split',
    inputs: [
        { name: 'string_var', type: 'text', placeholder: 'my_string' },
        { name: 'delimiter', type: 'text', placeholder: '","' },
    ],
    template: '{string_var}.split({delimiter})',
    color: 'bg-emerald-500',
    accent: 'border-l-emerald-300',
    flow: false,
    isExpression: true,
  },
  list_join: {
    text: 'list join',
    category: BlockCategory.STRING_OPS,
    syntax: 'list_join',
    inputs: [
        { name: 'delimiter', type: 'text', placeholder: '" "' },
        { name: 'list_var', type: 'text', placeholder: 'my_list' },
    ],
    template: '{delimiter}.join({list_var})',
    color: 'bg-emerald-500',
    accent: 'border-l-emerald-300',
    flow: false,
    isExpression: true,
  },
  list_append: {
    text: 'list append',
    category: BlockCategory.LIST_DICT_OPS,
    syntax: 'list_append',
    inputs: [
        { name: 'list_var', type: 'text', placeholder: 'my_list' },
        { name: 'item', type: 'text', placeholder: '"new_item"' },
    ],
    template: '{list_var}.append({item})',
    color: 'bg-indigo-500',
    accent: 'border-l-indigo-300',
    flow: true,
    isExpression: false,
  },
  list_get: {
    text: 'list get item',
    category: BlockCategory.LIST_DICT_OPS,
    syntax: 'list_get',
    inputs: [
        { name: 'list_var', type: 'text', placeholder: 'my_list' },
        { name: 'index', type: 'number', placeholder: '0' },
    ],
    template: '{list_var}[{index}]',
    color: 'bg-indigo-500',
    accent: 'border-l-indigo-300',
    flow: false,
    isExpression: true,
  },
  dict_set: {
    text: 'dict set item',
    category: BlockCategory.LIST_DICT_OPS,
    syntax: 'dict_set',
    inputs: [
        { name: 'dict_var', type: 'text', placeholder: 'my_dict' },
        { name: 'key', type: 'text', placeholder: '"name"' },
        { name: 'value', type: 'text', placeholder: '"Alice"' },
    ],
    template: '{dict_var}[{key}] = {value}',
    color: 'bg-indigo-500',
    accent: 'border-l-indigo-300',
    flow: true,
    isExpression: false,
  },
  dict_get: {
    text: 'dict get item',
    category: BlockCategory.LIST_DICT_OPS,
    syntax: 'dict_get',
    inputs: [
        { name: 'dict_var', type: 'text', placeholder: 'my_dict' },
        { name: 'key', type: 'text', placeholder: '"name"' },
    ],
    template: '{dict_var}.get({key})',
    color: 'bg-indigo-500',
    accent: 'border-l-indigo-300',
    flow: false,
    isExpression: true,
  },
  try_except: {
    text: 'try / except',
    category: BlockCategory.ERROR_HANDLING,
    syntax: 'try_except',
    inputs: [],
    nestableAreas: [
        { name: 'body', label: 'try' },
        { name: 'except_body', label: 'except Exception as e' }
    ],
    template: 'try:\n{body}\nexcept Exception as e:\n{except_body}',
    color: 'bg-rose-500',
    accent: 'border-l-rose-300',
    flow: true,
    isExpression: false,
  },
  comment: {
    text: 'comment',
    category: BlockCategory.UTILITY,
    syntax: 'comment',
    inputs: [{ name: 'text', type: 'text', placeholder: 'Add note here' }],
    template: '# {text}',
    color: 'bg-gray-400',
    accent: 'border-l-gray-300',
    flow: true,
    isExpression: false,
  },
};
